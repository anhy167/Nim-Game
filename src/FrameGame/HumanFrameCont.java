/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package FrameGame;

import static FrameGame.EasyFrameCont.data;
import Nim.Pile;
import java.awt.Image;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author Acer
 */
public class HumanFrameCont extends javax.swing.JFrame {

    private Pile pile;
    private int amount;
    private boolean isYourTurn = true;
    private int totalCoin;
    private int remaining;
    private boolean state;

    public HumanFrameCont() {
        initComponents();
        getContentPane().setBackground(new java.awt.Color(51, 40, 128));
        pile = new Pile();
        data = new ArrayList<String>();
        readData();
        if (remaining > 1) {
            addCoin(jPanel2, remaining);
            showTotalCoinBtn.setText(String.valueOf(totalCoin));
            remainCoinBtn.setText(String.valueOf(remaining));

            if (state == isYourTurn) {
                showState.setText("Player1's turn!");
                isYourTurn = true;
                takeCoinBtn2.setEnabled(false);
                takeCoinBtn1.setEnabled(true);

            } else {
                showState.setText("Player2's turn!");
                isYourTurn = false;
                takeCoinBtn2.setEnabled(true);
                takeCoinBtn1.setEnabled(false);

            }
            getCoinPlayer1.setText("");
            getCoinPlayer2.setText("");
        } else {
            myInitState();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        totalCoinLbl = new javax.swing.JLabel();
        remainLbl = new javax.swing.JLabel();
        player1Lbl = new javax.swing.JLabel();
        player2Lbl = new javax.swing.JLabel();
        showTotalCoinBtn = new javax.swing.JButton();
        remainCoinBtn = new javax.swing.JButton();
        getCoinPlayer2 = new javax.swing.JTextField();
        getCoinPlayer1 = new javax.swing.JTextField();
        takeCoinBtn1 = new javax.swing.JButton();
        takeCoinBtn2 = new javax.swing.JButton();
        renewBtn = new javax.swing.JButton();
        backBtn = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        showState = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jPanel3 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Human Mode");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(51, 40, 128));
        jPanel1.setPreferredSize(new java.awt.Dimension(290, 425));

        totalCoinLbl.setBackground(new java.awt.Color(51, 40, 128));
        totalCoinLbl.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        totalCoinLbl.setForeground(new java.awt.Color(255, 195, 62));
        totalCoinLbl.setText("Total");
        totalCoinLbl.setOpaque(true);

        remainLbl.setBackground(new java.awt.Color(51, 40, 128));
        remainLbl.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        remainLbl.setForeground(new java.awt.Color(255, 195, 62));
        remainLbl.setText("Remaining");
        remainLbl.setOpaque(true);

        player1Lbl.setBackground(new java.awt.Color(51, 40, 128));
        player1Lbl.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        player1Lbl.setForeground(new java.awt.Color(255, 195, 62));
        player1Lbl.setText("Player 1:");
        player1Lbl.setOpaque(true);

        player2Lbl.setBackground(new java.awt.Color(51, 40, 128));
        player2Lbl.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        player2Lbl.setForeground(new java.awt.Color(255, 195, 62));
        player2Lbl.setText("Player 2:");
        player2Lbl.setOpaque(true);

        takeCoinBtn1.setBackground(new java.awt.Color(235, 235, 235));
        takeCoinBtn1.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        takeCoinBtn1.setForeground(new java.awt.Color(255, 168, 12));
        takeCoinBtn1.setText("Take");
        takeCoinBtn1.setOpaque(true);
        takeCoinBtn1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                takeCoinBtn1MouseClicked(evt);
            }
        });

        takeCoinBtn2.setBackground(new java.awt.Color(235, 235, 235));
        takeCoinBtn2.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        takeCoinBtn2.setForeground(new java.awt.Color(255, 168, 12));
        takeCoinBtn2.setText("Take");
        takeCoinBtn2.setOpaque(true);
        takeCoinBtn2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                takeCoinBtn2MouseClicked(evt);
            }
        });

        renewBtn.setBackground(new java.awt.Color(235, 235, 235));
        renewBtn.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        renewBtn.setForeground(new java.awt.Color(255, 168, 12));
        renewBtn.setText("New game");
        renewBtn.setOpaque(true);
        renewBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                renewBtnMouseClicked(evt);
            }
        });

        backBtn.setBackground(new java.awt.Color(235, 235, 235));
        backBtn.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        backBtn.setForeground(new java.awt.Color(255, 168, 12));
        backBtn.setText("Back");
        backBtn.setOpaque(true);
        backBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                backBtnMouseClicked(evt);
            }
        });

        showState.setBackground(new java.awt.Color(51, 40, 128));
        showState.setForeground(new java.awt.Color(255, 195, 62));
        showState.setOpaque(true);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(showState, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(totalCoinLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(remainLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(player1Lbl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(player2Lbl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE)))
                        .addGap(31, 31, 31)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(getCoinPlayer2, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(takeCoinBtn2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(remainCoinBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(showTotalCoinBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(getCoinPlayer1, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(takeCoinBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jSeparator2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 1, Short.MAX_VALUE)
                .addGap(10, 10, 10))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(renewBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(backBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(99, 99, 99))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(totalCoinLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(showTotalCoinBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(remainLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(remainCoinBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(player1Lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(getCoinPlayer1)
                    .addComponent(takeCoinBtn1, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(player2Lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(getCoinPlayer2)
                    .addComponent(takeCoinBtn2, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(showState)
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(48, 48, 48)
                .addComponent(renewBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(backBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44))
        );

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setPreferredSize(new java.awt.Dimension(6, 0));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 6, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 390, Short.MAX_VALUE)
        );

        jPanel2.setPreferredSize(new java.awt.Dimension(0, 0));
        jPanel2.setLayout(new java.awt.GridLayout(10, 10));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(17, 17, 17))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void takeCoinBtn1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_takeCoinBtn1MouseClicked

        if (isYourTurn == true) {
            showState.setText("Player1's turn!");
            amount = Integer.parseInt(getCoinPlayer1.getText());
            getCoinPlayer1.setText("");
            while (true) {
                if (amount <= remaining / 2 && amount > 0) {
                    break;
                } else {
                    JOptionPane.showMessageDialog(this, "The number of coins taken must be less greater than " + remaining / 2 + " and greater than 0!");
                    return;
                }
            }
            
            remaining = remaining - amount;
            addCoin(jPanel2, remaining);
            String remainCoinStr = String.valueOf(remaining);
            remainCoinBtn.setText(remainCoinStr);
            if (remaining == 1) {
                if (JOptionPane.showConfirmDialog(this, "Player 1 win!!! Do you want to play again?", "Confirmation", JOptionPane.YES_NO_OPTION) == JOptionPane.NO_OPTION) {
                    new Main().setVisible(true);
                    this.setVisible(false);
                    return;
                }
                this.dispose();
                new HumanFrame().setVisible(true);
            }
            takeCoinBtn2.setEnabled(true);
            takeCoinBtn1.setEnabled(false);
            isYourTurn = false;
            showState.setText("Player2's turn!");
        }
    }//GEN-LAST:event_takeCoinBtn1MouseClicked

    private void takeCoinBtn2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_takeCoinBtn2MouseClicked

        if (isYourTurn == false) {
            showState.setText("Player2's turn!");
            amount = Integer.parseInt(getCoinPlayer2.getText());
            getCoinPlayer2.setText("");
            while (true) {
                if (amount <= remaining / 2 && amount > 0) {
                    break;
                } else {
                    JOptionPane.showMessageDialog(this, "The number of coins taken must be less greater than " + remaining / 2 + " and greater than 0!");
//                    một nửa số đồng xu
                    return;
                }
            }

            
            remaining = remaining - amount;
            addCoin(jPanel2, remaining);
            remainCoinBtn.setText(String.valueOf(remaining));

            if (remaining == 1) {
                if (JOptionPane.showConfirmDialog(this, "Player 2 win!!! Do you want to play again?", "Confirmation", JOptionPane.YES_NO_OPTION) == JOptionPane.NO_OPTION) {
                    new Main().setVisible(true);
                    this.setVisible(false);
                    return;
                }
                this.dispose();
                new HumanFrame().setVisible(true);
            }
            takeCoinBtn1.setEnabled(true);
            takeCoinBtn2.setEnabled(false);
            isYourTurn = true;
            showState.setText("Player1's turn!");
        }
    }//GEN-LAST:event_takeCoinBtn2MouseClicked

    private void renewBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_renewBtnMouseClicked
        this.setVisible(false);
        new HumanFrame().setVisible(true);
    }//GEN-LAST:event_renewBtnMouseClicked

    private void backBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backBtnMouseClicked
        this.setVisible(false);
        new Main().setVisible(true);
        updateData();
    }//GEN-LAST:event_backBtnMouseClicked

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        updateData();
    }//GEN-LAST:event_formWindowClosing
    public void addCoin(JPanel jp, int pileSize) {

        jp.removeAll();
        jp.updateUI();

        for (int i = 0; i < pileSize; i++) {
            JLabel j1 = new JLabel();
            j1.setSize(40, 40);
            j1.setIcon(new ImageIcon(new ImageIcon(getClass().getResource("/img/coin-removebg.png")).getImage().getScaledInstance(40, 40, Image.SCALE_SMOOTH)));
            jp.add(j1);
            jp.setBackground(new java.awt.Color(51, 40, 128));
        }

    }

    public void updateData() {
        String url = "C:\\Users\\Acer\\Documents\\NetBeansProjects\\The-Game-of-Nim-Programming-II-master\\src\\data\\data_human.txt";
        BufferedWriter bw = null;
        try {
            FileWriter fw = new FileWriter(url);
            bw = new BufferedWriter(fw);
            String totalCoinUpdate = String.valueOf(totalCoin);
            String remainingUpdate = String.valueOf(remaining);
            String stateUpdate = String.valueOf(isYourTurn);

            bw.write(totalCoinUpdate + "\n");
            bw.write(remainingUpdate + "\n");
            bw.write(stateUpdate);

        } catch (Exception ex) {
            System.out.println(ex);
        } finally {
            try {
                bw.close();
            } catch (IOException ex) {
                System.out.println(ex);
            }
        }
    }

    public void readData() {
        String url = "C:\\Users\\Acer\\Documents\\NetBeansProjects\\The-Game-of-Nim-Programming-II-master\\src\\data\\data_human.txt";
        BufferedReader br = null;
        try {
            FileReader fr = new FileReader(url);
            br = new BufferedReader(fr);
            String str = null;
            while ((str = br.readLine()) != null && !str.isEmpty()) {
                String[] arr = str.split("\n");
                for (int i = 0; i < arr.length; i++) {
                    data.add(arr[i]);
                }
            }
            String totalCoinStr = String.valueOf(data.get(0));
            String remainingStr = String.valueOf(data.get(1));
            String stateStr = String.valueOf(data.get(2));
            totalCoin = Integer.parseInt(totalCoinStr);
            remaining = Integer.parseInt(remainingStr);
            state = Boolean.parseBoolean(stateStr);

        } catch (Exception ex) {
            System.out.println(ex);
        } finally {
            try {
                br.close();
            } catch (IOException ex) {
                System.out.println(ex);
            }
        }
    }

    private void myInitState() {
        totalCoin = pile.getPileSize();
        remaining = totalCoin;
        addCoin(jPanel2, remaining);
        showTotalCoinBtn.setText(String.valueOf(remaining));

        if (JOptionPane.showConfirmDialog(this, "Which player want to play first? Click 'Yes' for player 1, 'No' for player 2.", "Confirmation", JOptionPane.YES_NO_OPTION) == JOptionPane.NO_OPTION) {
            takeCoinBtn1.setEnabled(false);
            showState.setText("Player2's turn!");
            isYourTurn = false;

        } else {
            showState.setText("Player1's turn!");
            takeCoinBtn2.setEnabled(false);
            isYourTurn = true;
        }
        getCoinPlayer1.setText("");
        getCoinPlayer2.setText("");

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HumanFrameCont.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HumanFrameCont.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HumanFrameCont.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HumanFrameCont.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HumanFrameCont().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBtn;
    private javax.swing.JTextField getCoinPlayer1;
    private javax.swing.JTextField getCoinPlayer2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel player1Lbl;
    private javax.swing.JLabel player2Lbl;
    private javax.swing.JButton remainCoinBtn;
    private javax.swing.JLabel remainLbl;
    private javax.swing.JButton renewBtn;
    private javax.swing.JLabel showState;
    private javax.swing.JButton showTotalCoinBtn;
    private javax.swing.JButton takeCoinBtn1;
    private javax.swing.JButton takeCoinBtn2;
    private javax.swing.JLabel totalCoinLbl;
    // End of variables declaration//GEN-END:variables

}
